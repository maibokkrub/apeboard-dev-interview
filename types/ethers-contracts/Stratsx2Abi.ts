/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface Stratsx2AbiInterface extends utils.Interface {
  contractName: "Stratsx2Abi";
  functions: {
    "AUTOAddress()": FunctionFragment;
    "autoFarmAddress()": FunctionFragment;
    "buyBackAddress()": FunctionFragment;
    "buyBackRate()": FunctionFragment;
    "buyBackRateMax()": FunctionFragment;
    "buyBackRateUL()": FunctionFragment;
    "controllerFee()": FunctionFragment;
    "controllerFeeMax()": FunctionFragment;
    "controllerFeeUL()": FunctionFragment;
    "deposit(address,uint256)": FunctionFragment;
    "earn()": FunctionFragment;
    "earnedAddress()": FunctionFragment;
    "earnedToAUTOPath(uint256)": FunctionFragment;
    "earnedToToken0Path(uint256)": FunctionFragment;
    "earnedToToken1Path(uint256)": FunctionFragment;
    "entranceFeeFactor()": FunctionFragment;
    "entranceFeeFactorLL()": FunctionFragment;
    "entranceFeeFactorMax()": FunctionFragment;
    "farm()": FunctionFragment;
    "farmContractAddress()": FunctionFragment;
    "govAddress()": FunctionFragment;
    "inCaseTokensGetStuck(address,uint256,address)": FunctionFragment;
    "isAutoComp()": FunctionFragment;
    "isCAKEStaking()": FunctionFragment;
    "isSameAssetDeposit()": FunctionFragment;
    "lastEarnBlock()": FunctionFragment;
    "onlyGov()": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "pid()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardsAddress()": FunctionFragment;
    "setBuyBackAddress(address)": FunctionFragment;
    "setGov(address)": FunctionFragment;
    "setOnlyGov(bool)": FunctionFragment;
    "setRewardsAddress(address)": FunctionFragment;
    "setSettings(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "setUniRouterAddress(address)": FunctionFragment;
    "sharesTotal()": FunctionFragment;
    "slippageFactor()": FunctionFragment;
    "slippageFactorUL()": FunctionFragment;
    "token0Address()": FunctionFragment;
    "token0ToEarnedPath(uint256)": FunctionFragment;
    "token1Address()": FunctionFragment;
    "token1ToEarnedPath(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "uniRouterAddress()": FunctionFragment;
    "unpause()": FunctionFragment;
    "wantAddress()": FunctionFragment;
    "wantLockedTotal()": FunctionFragment;
    "wbnbAddress()": FunctionFragment;
    "withdraw(address,uint256)": FunctionFragment;
    "withdrawFeeFactor()": FunctionFragment;
    "withdrawFeeFactorLL()": FunctionFragment;
    "withdrawFeeFactorMax()": FunctionFragment;
    "wrapBNB()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "AUTOAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "autoFarmAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyBackAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyBackRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyBackRateMax",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyBackRateUL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "controllerFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "controllerFeeMax",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "controllerFeeUL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "earn", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "earnedAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "earnedToAUTOPath",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "earnedToToken0Path",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "earnedToToken1Path",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "entranceFeeFactor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "entranceFeeFactorLL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "entranceFeeFactorMax",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "farm", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "farmContractAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "govAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "inCaseTokensGetStuck",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isAutoComp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isCAKEStaking",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isSameAssetDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastEarnBlock",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "onlyGov", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "pid", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBuyBackAddress",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setGov", values: [string]): string;
  encodeFunctionData(functionFragment: "setOnlyGov", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "setRewardsAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setSettings",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setUniRouterAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "sharesTotal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "slippageFactor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "slippageFactorUL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "token0Address",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "token0ToEarnedPath",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "token1Address",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "token1ToEarnedPath",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "uniRouterAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "wantAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "wantLockedTotal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "wbnbAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFeeFactor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFeeFactorLL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFeeFactorMax",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "wrapBNB", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "AUTOAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "autoFarmAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyBackAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyBackRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyBackRateMax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyBackRateUL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "controllerFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "controllerFeeMax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "controllerFeeUL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "earn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "earnedAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "earnedToAUTOPath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "earnedToToken0Path",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "earnedToToken1Path",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "entranceFeeFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "entranceFeeFactorLL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "entranceFeeFactorMax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "farm", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "farmContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "govAddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "inCaseTokensGetStuck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isAutoComp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isCAKEStaking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSameAssetDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastEarnBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "onlyGov", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBuyBackAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setGov", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setOnlyGov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRewardsAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUniRouterAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sharesTotal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "slippageFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "slippageFactorUL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "token0Address",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "token0ToEarnedPath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "token1Address",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "token1ToEarnedPath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniRouterAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "wantAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wantLockedTotal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wbnbAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFeeFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFeeFactorLL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFeeFactorMax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wrapBNB", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "SetBuyBackAddress(address)": EventFragment;
    "SetGov(address)": EventFragment;
    "SetOnlyGov(bool)": EventFragment;
    "SetRewardsAddress(address)": EventFragment;
    "SetSettings(uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "SetUniRouterAddress(address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetBuyBackAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetGov"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetOnlyGov"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetRewardsAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetSettings"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetUniRouterAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type PausedEvent = TypedEvent<[string], { account: string }>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export type SetBuyBackAddressEvent = TypedEvent<
  [string],
  { _buyBackAddress: string }
>;

export type SetBuyBackAddressEventFilter =
  TypedEventFilter<SetBuyBackAddressEvent>;

export type SetGovEvent = TypedEvent<[string], { _govAddress: string }>;

export type SetGovEventFilter = TypedEventFilter<SetGovEvent>;

export type SetOnlyGovEvent = TypedEvent<[boolean], { _onlyGov: boolean }>;

export type SetOnlyGovEventFilter = TypedEventFilter<SetOnlyGovEvent>;

export type SetRewardsAddressEvent = TypedEvent<
  [string],
  { _rewardsAddress: string }
>;

export type SetRewardsAddressEventFilter =
  TypedEventFilter<SetRewardsAddressEvent>;

export type SetSettingsEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    _entranceFeeFactor: BigNumber;
    _withdrawFeeFactor: BigNumber;
    _controllerFee: BigNumber;
    _buyBackRate: BigNumber;
    _slippageFactor: BigNumber;
  }
>;

export type SetSettingsEventFilter = TypedEventFilter<SetSettingsEvent>;

export type SetUniRouterAddressEvent = TypedEvent<
  [string],
  { _uniRouterAddress: string }
>;

export type SetUniRouterAddressEventFilter =
  TypedEventFilter<SetUniRouterAddressEvent>;

export type UnpausedEvent = TypedEvent<[string], { account: string }>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface Stratsx2Abi extends BaseContract {
  contractName: "Stratsx2Abi";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: Stratsx2AbiInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    AUTOAddress(overrides?: CallOverrides): Promise<[string]>;

    autoFarmAddress(overrides?: CallOverrides): Promise<[string]>;

    buyBackAddress(overrides?: CallOverrides): Promise<[string]>;

    buyBackRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    buyBackRateMax(overrides?: CallOverrides): Promise<[BigNumber]>;

    buyBackRateUL(overrides?: CallOverrides): Promise<[BigNumber]>;

    controllerFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    controllerFeeMax(overrides?: CallOverrides): Promise<[BigNumber]>;

    controllerFeeUL(overrides?: CallOverrides): Promise<[BigNumber]>;

    deposit(
      _userAddress: string,
      _wantAmt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    earn(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    earnedAddress(overrides?: CallOverrides): Promise<[string]>;

    earnedToAUTOPath(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    earnedToToken0Path(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    earnedToToken1Path(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    entranceFeeFactor(overrides?: CallOverrides): Promise<[BigNumber]>;

    entranceFeeFactorLL(overrides?: CallOverrides): Promise<[BigNumber]>;

    entranceFeeFactorMax(overrides?: CallOverrides): Promise<[BigNumber]>;

    farm(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    farmContractAddress(overrides?: CallOverrides): Promise<[string]>;

    govAddress(overrides?: CallOverrides): Promise<[string]>;

    inCaseTokensGetStuck(
      _token: string,
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isAutoComp(overrides?: CallOverrides): Promise<[boolean]>;

    isCAKEStaking(overrides?: CallOverrides): Promise<[boolean]>;

    isSameAssetDeposit(overrides?: CallOverrides): Promise<[boolean]>;

    lastEarnBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    onlyGov(overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    pid(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardsAddress(overrides?: CallOverrides): Promise<[string]>;

    setBuyBackAddress(
      _buyBackAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGov(
      _govAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOnlyGov(
      _onlyGov: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRewardsAddress(
      _rewardsAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSettings(
      _entranceFeeFactor: BigNumberish,
      _withdrawFeeFactor: BigNumberish,
      _controllerFee: BigNumberish,
      _buyBackRate: BigNumberish,
      _slippageFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUniRouterAddress(
      _uniRouterAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sharesTotal(overrides?: CallOverrides): Promise<[BigNumber]>;

    slippageFactor(overrides?: CallOverrides): Promise<[BigNumber]>;

    slippageFactorUL(overrides?: CallOverrides): Promise<[BigNumber]>;

    token0Address(overrides?: CallOverrides): Promise<[string]>;

    token0ToEarnedPath(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    token1Address(overrides?: CallOverrides): Promise<[string]>;

    token1ToEarnedPath(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    uniRouterAddress(overrides?: CallOverrides): Promise<[string]>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    wantAddress(overrides?: CallOverrides): Promise<[string]>;

    wantLockedTotal(overrides?: CallOverrides): Promise<[BigNumber]>;

    wbnbAddress(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      _userAddress: string,
      _wantAmt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawFeeFactor(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawFeeFactorLL(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawFeeFactorMax(overrides?: CallOverrides): Promise<[BigNumber]>;

    wrapBNB(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  AUTOAddress(overrides?: CallOverrides): Promise<string>;

  autoFarmAddress(overrides?: CallOverrides): Promise<string>;

  buyBackAddress(overrides?: CallOverrides): Promise<string>;

  buyBackRate(overrides?: CallOverrides): Promise<BigNumber>;

  buyBackRateMax(overrides?: CallOverrides): Promise<BigNumber>;

  buyBackRateUL(overrides?: CallOverrides): Promise<BigNumber>;

  controllerFee(overrides?: CallOverrides): Promise<BigNumber>;

  controllerFeeMax(overrides?: CallOverrides): Promise<BigNumber>;

  controllerFeeUL(overrides?: CallOverrides): Promise<BigNumber>;

  deposit(
    _userAddress: string,
    _wantAmt: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  earn(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  earnedAddress(overrides?: CallOverrides): Promise<string>;

  earnedToAUTOPath(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  earnedToToken0Path(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  earnedToToken1Path(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  entranceFeeFactor(overrides?: CallOverrides): Promise<BigNumber>;

  entranceFeeFactorLL(overrides?: CallOverrides): Promise<BigNumber>;

  entranceFeeFactorMax(overrides?: CallOverrides): Promise<BigNumber>;

  farm(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  farmContractAddress(overrides?: CallOverrides): Promise<string>;

  govAddress(overrides?: CallOverrides): Promise<string>;

  inCaseTokensGetStuck(
    _token: string,
    _amount: BigNumberish,
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isAutoComp(overrides?: CallOverrides): Promise<boolean>;

  isCAKEStaking(overrides?: CallOverrides): Promise<boolean>;

  isSameAssetDeposit(overrides?: CallOverrides): Promise<boolean>;

  lastEarnBlock(overrides?: CallOverrides): Promise<BigNumber>;

  onlyGov(overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  pid(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardsAddress(overrides?: CallOverrides): Promise<string>;

  setBuyBackAddress(
    _buyBackAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGov(
    _govAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOnlyGov(
    _onlyGov: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRewardsAddress(
    _rewardsAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSettings(
    _entranceFeeFactor: BigNumberish,
    _withdrawFeeFactor: BigNumberish,
    _controllerFee: BigNumberish,
    _buyBackRate: BigNumberish,
    _slippageFactor: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUniRouterAddress(
    _uniRouterAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sharesTotal(overrides?: CallOverrides): Promise<BigNumber>;

  slippageFactor(overrides?: CallOverrides): Promise<BigNumber>;

  slippageFactorUL(overrides?: CallOverrides): Promise<BigNumber>;

  token0Address(overrides?: CallOverrides): Promise<string>;

  token0ToEarnedPath(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  token1Address(overrides?: CallOverrides): Promise<string>;

  token1ToEarnedPath(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  uniRouterAddress(overrides?: CallOverrides): Promise<string>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  wantAddress(overrides?: CallOverrides): Promise<string>;

  wantLockedTotal(overrides?: CallOverrides): Promise<BigNumber>;

  wbnbAddress(overrides?: CallOverrides): Promise<string>;

  withdraw(
    _userAddress: string,
    _wantAmt: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawFeeFactor(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawFeeFactorLL(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawFeeFactorMax(overrides?: CallOverrides): Promise<BigNumber>;

  wrapBNB(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    AUTOAddress(overrides?: CallOverrides): Promise<string>;

    autoFarmAddress(overrides?: CallOverrides): Promise<string>;

    buyBackAddress(overrides?: CallOverrides): Promise<string>;

    buyBackRate(overrides?: CallOverrides): Promise<BigNumber>;

    buyBackRateMax(overrides?: CallOverrides): Promise<BigNumber>;

    buyBackRateUL(overrides?: CallOverrides): Promise<BigNumber>;

    controllerFee(overrides?: CallOverrides): Promise<BigNumber>;

    controllerFeeMax(overrides?: CallOverrides): Promise<BigNumber>;

    controllerFeeUL(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _userAddress: string,
      _wantAmt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    earn(overrides?: CallOverrides): Promise<void>;

    earnedAddress(overrides?: CallOverrides): Promise<string>;

    earnedToAUTOPath(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    earnedToToken0Path(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    earnedToToken1Path(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    entranceFeeFactor(overrides?: CallOverrides): Promise<BigNumber>;

    entranceFeeFactorLL(overrides?: CallOverrides): Promise<BigNumber>;

    entranceFeeFactorMax(overrides?: CallOverrides): Promise<BigNumber>;

    farm(overrides?: CallOverrides): Promise<void>;

    farmContractAddress(overrides?: CallOverrides): Promise<string>;

    govAddress(overrides?: CallOverrides): Promise<string>;

    inCaseTokensGetStuck(
      _token: string,
      _amount: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isAutoComp(overrides?: CallOverrides): Promise<boolean>;

    isCAKEStaking(overrides?: CallOverrides): Promise<boolean>;

    isSameAssetDeposit(overrides?: CallOverrides): Promise<boolean>;

    lastEarnBlock(overrides?: CallOverrides): Promise<BigNumber>;

    onlyGov(overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    pid(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardsAddress(overrides?: CallOverrides): Promise<string>;

    setBuyBackAddress(
      _buyBackAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setGov(_govAddress: string, overrides?: CallOverrides): Promise<void>;

    setOnlyGov(_onlyGov: boolean, overrides?: CallOverrides): Promise<void>;

    setRewardsAddress(
      _rewardsAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setSettings(
      _entranceFeeFactor: BigNumberish,
      _withdrawFeeFactor: BigNumberish,
      _controllerFee: BigNumberish,
      _buyBackRate: BigNumberish,
      _slippageFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setUniRouterAddress(
      _uniRouterAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    sharesTotal(overrides?: CallOverrides): Promise<BigNumber>;

    slippageFactor(overrides?: CallOverrides): Promise<BigNumber>;

    slippageFactorUL(overrides?: CallOverrides): Promise<BigNumber>;

    token0Address(overrides?: CallOverrides): Promise<string>;

    token0ToEarnedPath(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    token1Address(overrides?: CallOverrides): Promise<string>;

    token1ToEarnedPath(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    uniRouterAddress(overrides?: CallOverrides): Promise<string>;

    unpause(overrides?: CallOverrides): Promise<void>;

    wantAddress(overrides?: CallOverrides): Promise<string>;

    wantLockedTotal(overrides?: CallOverrides): Promise<BigNumber>;

    wbnbAddress(overrides?: CallOverrides): Promise<string>;

    withdraw(
      _userAddress: string,
      _wantAmt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawFeeFactor(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFeeFactorLL(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFeeFactorMax(overrides?: CallOverrides): Promise<BigNumber>;

    wrapBNB(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "SetBuyBackAddress(address)"(
      _buyBackAddress?: null
    ): SetBuyBackAddressEventFilter;
    SetBuyBackAddress(_buyBackAddress?: null): SetBuyBackAddressEventFilter;

    "SetGov(address)"(_govAddress?: null): SetGovEventFilter;
    SetGov(_govAddress?: null): SetGovEventFilter;

    "SetOnlyGov(bool)"(_onlyGov?: null): SetOnlyGovEventFilter;
    SetOnlyGov(_onlyGov?: null): SetOnlyGovEventFilter;

    "SetRewardsAddress(address)"(
      _rewardsAddress?: null
    ): SetRewardsAddressEventFilter;
    SetRewardsAddress(_rewardsAddress?: null): SetRewardsAddressEventFilter;

    "SetSettings(uint256,uint256,uint256,uint256,uint256)"(
      _entranceFeeFactor?: null,
      _withdrawFeeFactor?: null,
      _controllerFee?: null,
      _buyBackRate?: null,
      _slippageFactor?: null
    ): SetSettingsEventFilter;
    SetSettings(
      _entranceFeeFactor?: null,
      _withdrawFeeFactor?: null,
      _controllerFee?: null,
      _buyBackRate?: null,
      _slippageFactor?: null
    ): SetSettingsEventFilter;

    "SetUniRouterAddress(address)"(
      _uniRouterAddress?: null
    ): SetUniRouterAddressEventFilter;
    SetUniRouterAddress(
      _uniRouterAddress?: null
    ): SetUniRouterAddressEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    AUTOAddress(overrides?: CallOverrides): Promise<BigNumber>;

    autoFarmAddress(overrides?: CallOverrides): Promise<BigNumber>;

    buyBackAddress(overrides?: CallOverrides): Promise<BigNumber>;

    buyBackRate(overrides?: CallOverrides): Promise<BigNumber>;

    buyBackRateMax(overrides?: CallOverrides): Promise<BigNumber>;

    buyBackRateUL(overrides?: CallOverrides): Promise<BigNumber>;

    controllerFee(overrides?: CallOverrides): Promise<BigNumber>;

    controllerFeeMax(overrides?: CallOverrides): Promise<BigNumber>;

    controllerFeeUL(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _userAddress: string,
      _wantAmt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    earn(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    earnedAddress(overrides?: CallOverrides): Promise<BigNumber>;

    earnedToAUTOPath(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    earnedToToken0Path(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    earnedToToken1Path(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    entranceFeeFactor(overrides?: CallOverrides): Promise<BigNumber>;

    entranceFeeFactorLL(overrides?: CallOverrides): Promise<BigNumber>;

    entranceFeeFactorMax(overrides?: CallOverrides): Promise<BigNumber>;

    farm(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    farmContractAddress(overrides?: CallOverrides): Promise<BigNumber>;

    govAddress(overrides?: CallOverrides): Promise<BigNumber>;

    inCaseTokensGetStuck(
      _token: string,
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isAutoComp(overrides?: CallOverrides): Promise<BigNumber>;

    isCAKEStaking(overrides?: CallOverrides): Promise<BigNumber>;

    isSameAssetDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    lastEarnBlock(overrides?: CallOverrides): Promise<BigNumber>;

    onlyGov(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    pid(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardsAddress(overrides?: CallOverrides): Promise<BigNumber>;

    setBuyBackAddress(
      _buyBackAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGov(
      _govAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOnlyGov(
      _onlyGov: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRewardsAddress(
      _rewardsAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSettings(
      _entranceFeeFactor: BigNumberish,
      _withdrawFeeFactor: BigNumberish,
      _controllerFee: BigNumberish,
      _buyBackRate: BigNumberish,
      _slippageFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUniRouterAddress(
      _uniRouterAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sharesTotal(overrides?: CallOverrides): Promise<BigNumber>;

    slippageFactor(overrides?: CallOverrides): Promise<BigNumber>;

    slippageFactorUL(overrides?: CallOverrides): Promise<BigNumber>;

    token0Address(overrides?: CallOverrides): Promise<BigNumber>;

    token0ToEarnedPath(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    token1Address(overrides?: CallOverrides): Promise<BigNumber>;

    token1ToEarnedPath(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    uniRouterAddress(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    wantAddress(overrides?: CallOverrides): Promise<BigNumber>;

    wantLockedTotal(overrides?: CallOverrides): Promise<BigNumber>;

    wbnbAddress(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _userAddress: string,
      _wantAmt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawFeeFactor(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFeeFactorLL(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFeeFactorMax(overrides?: CallOverrides): Promise<BigNumber>;

    wrapBNB(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    AUTOAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    autoFarmAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyBackAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyBackRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyBackRateMax(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyBackRateUL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    controllerFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    controllerFeeMax(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    controllerFeeUL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      _userAddress: string,
      _wantAmt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    earn(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    earnedAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    earnedToAUTOPath(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    earnedToToken0Path(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    earnedToToken1Path(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    entranceFeeFactor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    entranceFeeFactorLL(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    entranceFeeFactorMax(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    farm(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    farmContractAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    govAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    inCaseTokensGetStuck(
      _token: string,
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isAutoComp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isCAKEStaking(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isSameAssetDeposit(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastEarnBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onlyGov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pid(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardsAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setBuyBackAddress(
      _buyBackAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGov(
      _govAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOnlyGov(
      _onlyGov: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRewardsAddress(
      _rewardsAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSettings(
      _entranceFeeFactor: BigNumberish,
      _withdrawFeeFactor: BigNumberish,
      _controllerFee: BigNumberish,
      _buyBackRate: BigNumberish,
      _slippageFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUniRouterAddress(
      _uniRouterAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sharesTotal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    slippageFactor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    slippageFactorUL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token0Address(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token0ToEarnedPath(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    token1Address(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token1ToEarnedPath(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    uniRouterAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    wantAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wantLockedTotal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wbnbAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _userAddress: string,
      _wantAmt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFeeFactor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawFeeFactorLL(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawFeeFactorMax(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    wrapBNB(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
